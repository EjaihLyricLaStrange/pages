<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Artur Dryomov</title>
    <link>http://arturdryomov.online/posts/</link>
    <description>Recent content in Posts on Artur Dryomov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://arturdryomov.online/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mobile Developer Morning Fun</title>
      <link>http://arturdryomov.online/posts/mobile-developer-morning-fun/</link>
      <pubDate>Sat, 16 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://arturdryomov.online/posts/mobile-developer-morning-fun/</guid>
      <description>Do you read this article on a phone? No? Well, I’m pretty sure you have a phone. Fun fact — I’ve bought the best phone I ever had, the Nexus 5X, from Amazon. Another fun fact — there is a pretty good chance you’ve bought something from Amazon too since it grabbed 4% of US retail sales in 2017. That’s a lot!
Amazon not only sells things but hosts a significant portion of internet resources thanks to Amazon Web Services.</description>
    </item>
    
    <item>
      <title>Do Androids Dream of UI Testing?</title>
      <link>http://arturdryomov.online/posts/do-androids-dream-of-ui-testing/</link>
      <pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://arturdryomov.online/posts/do-androids-dream-of-ui-testing/</guid>
      <description>Automation is a foundation stone of the software development. People didn’t like counting numbers themselves, so they invented calculators. Calculators went to be computers and here we go, waiting for AI to take over, watching movies about transhumanism on our way here.
Automation related to UI testing seems te be a Holy Grail from that standpoint. Sure thing, it can replace manual QA procedures with automated ones! Like, completely! You just need to have a local backend&amp;hellip; And maybe disable animations.</description>
    </item>
    
    <item>
      <title>A Dagger to Remember</title>
      <link>http://arturdryomov.online/posts/a-dagger-to-remember/</link>
      <pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://arturdryomov.online/posts/a-dagger-to-remember/</guid>
      <description>Story Time! Kotlin and Java annotations have a complicated relationship. This goes from the syntax to the toolchain.
Does anybody remember that at the beginning of time Kotlin annotations were placed in square brackets? In 2015 the syntax was changed to the current form. Before that, it was [Inject] instead of @Inject. Yep.
The syntax is fine at this point, but kapt (Kotlin annotation processing tool) from the Kotlin toolchain can be&amp;hellip; cruel.</description>
    </item>
    
    <item>
      <title>The Art of a Dependency Upgrade</title>
      <link>http://arturdryomov.online/posts/art-of-a-dependency-upgrade/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://arturdryomov.online/posts/art-of-a-dependency-upgrade/</guid>
      <description>RxJava 1.x reaches EOL on March 31, 2018, meaning no further development. That’s not surprising since the 1.x was in a bugfix-only mode since June 1, 2017.
This is an interesting event in a software lifetime, since not so many libraries actually live and prosper long enough to produce a superior version, at the same time handling support for an older version for so long. Fortunately enough, RxJava is one of these lucky projects with maintainers actually caring about users.</description>
    </item>
    
    <item>
      <title>Kotlin: The Problem with `null`</title>
      <link>http://arturdryomov.online/posts/kotlin-the-problem-with-null/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://arturdryomov.online/posts/kotlin-the-problem-with-null/</guid>
      <description>I think almost everybody in the CS world knows about the Null References: The Billion Dollar Mistake talk. However, it does not really matter if the concept of null references a good idea or a really bad one. We live in the world where we just have to deal with null this way or another. Yep, just deal with it. So let’s ask the “How” question instead of the “Why” one.</description>
    </item>
    
  </channel>
</rss>